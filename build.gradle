plugins {
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

wrapper {
    gradleVersion = '7.0.2'
    distributionType = Wrapper.DistributionType.BIN
}

allprojects {
    description = 'Change the color of your personal sky.'
    group = 'com.dscalzi'

    ext {
        name = 'SkyChanger'
        author = 'Daniel Scalzi (TheKraken7)'
        url = 'https://github.com/dscalzi/skychanger'
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.cadixdev.licenser'

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    def major = '5'
    def minor = '0'
    def spongeRevision = '0'
    def bukkitRevision = '0'

    def rev

    if (project.name.endsWith('Sponge')) {
        rev = spongeRevision
    } else if (project.name.endsWith('Bukkit')) {
        rev = bukkitRevision
    } else {
        rev = spongeRevision.toInteger() > bukkitRevision.toInteger() ? spongeRevision : bukkitRevision
    }

    version = "${major}.${minor}.${rev}"
    
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    
    configurations {
        testImplementation.extendsFrom compileOnly
    }

    processResources {
        from "../LICENSE.txt"
    }

    license {
        exclude '**/config.yml'
        header = rootProject.file('HEADER.txt')
        properties {
            name = 'Daniel D. Scalzi'
            year = '2017-2021'
            url = 'https://github.com/dscalzi/SkyChanger'
        }
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jar {
        archiveBaseName.set(project.name)

        manifest {
            attributes 'Implementation-Version': archiveVersion, 'Specification-Version': archiveVersion
        }
    }

    build {
        dependsOn clean
        dependsOn shadowJar

        jar.mustRunAfter clean
        shadowJar.mustRunAfter jar
    }
    
}